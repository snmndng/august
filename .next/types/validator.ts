// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
}


// Validate ../../app/about/page.tsx
{
  const handler = {} as typeof import("../../app/about/page.js")
  handler satisfies AppPageConfig<"/about">
}

// Validate ../../app/auth/login/page.tsx
{
  const handler = {} as typeof import("../../app/auth/login/page.js")
  handler satisfies AppPageConfig<"/auth/login">
}

// Validate ../../app/auth/register/page.tsx
{
  const handler = {} as typeof import("../../app/auth/register/page.js")
  handler satisfies AppPageConfig<"/auth/register">
}

// Validate ../../app/categories/page.tsx
{
  const handler = {} as typeof import("../../app/categories/page.js")
  handler satisfies AppPageConfig<"/categories">
}

// Validate ../../app/checkout/page.tsx
{
  const handler = {} as typeof import("../../app/checkout/page.js")
  handler satisfies AppPageConfig<"/checkout">
}

// Validate ../../app/contact/page.tsx
{
  const handler = {} as typeof import("../../app/contact/page.js")
  handler satisfies AppPageConfig<"/contact">
}

// Validate ../../app/cookies/page.tsx
{
  const handler = {} as typeof import("../../app/cookies/page.js")
  handler satisfies AppPageConfig<"/cookies">
}

// Validate ../../app/deals/page.tsx
{
  const handler = {} as typeof import("../../app/deals/page.js")
  handler satisfies AppPageConfig<"/deals">
}

// Validate ../../app/help/page.tsx
{
  const handler = {} as typeof import("../../app/help/page.js")
  handler satisfies AppPageConfig<"/help">
}

// Validate ../../app/page.tsx
{
  const handler = {} as typeof import("../../app/page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ../../app/privacy/page.tsx
{
  const handler = {} as typeof import("../../app/privacy/page.js")
  handler satisfies AppPageConfig<"/privacy">
}

// Validate ../../app/products/[slug]/page.tsx
{
  const handler = {} as typeof import("../../app/products/[slug]/page.js")
  handler satisfies AppPageConfig<"/products/[slug]">
}

// Validate ../../app/products/page.tsx
{
  const handler = {} as typeof import("../../app/products/page.js")
  handler satisfies AppPageConfig<"/products">
}

// Validate ../../app/returns/page.tsx
{
  const handler = {} as typeof import("../../app/returns/page.js")
  handler satisfies AppPageConfig<"/returns">
}

// Validate ../../app/shipping/page.tsx
{
  const handler = {} as typeof import("../../app/shipping/page.js")
  handler satisfies AppPageConfig<"/shipping">
}

// Validate ../../app/size-guide/page.tsx
{
  const handler = {} as typeof import("../../app/size-guide/page.js")
  handler satisfies AppPageConfig<"/size-guide">
}

// Validate ../../app/terms/page.tsx
{
  const handler = {} as typeof import("../../app/terms/page.js")
  handler satisfies AppPageConfig<"/terms">
}

// Validate ../../app/track-order/page.tsx
{
  const handler = {} as typeof import("../../app/track-order/page.js")
  handler satisfies AppPageConfig<"/track-order">
}

// Validate ../../app/api/categories/route.ts
{
  const handler = {} as typeof import("../../app/api/categories/route.js")
  handler satisfies RouteHandlerConfig<"/api/categories">
}

// Validate ../../app/api/products/[slug]/route.ts
{
  const handler = {} as typeof import("../../app/api/products/[slug]/route.js")
  handler satisfies RouteHandlerConfig<"/api/products/[slug]">
}

// Validate ../../app/api/products/route.ts
{
  const handler = {} as typeof import("../../app/api/products/route.js")
  handler satisfies RouteHandlerConfig<"/api/products">
}





// Validate ../../app/layout.tsx
{
  const handler = {} as typeof import("../../app/layout.js")
  handler satisfies LayoutConfig<"/">
}
